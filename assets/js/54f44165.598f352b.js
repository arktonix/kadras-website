"use strict";(self.webpackChunkkadras_docs=self.webpackChunkkadras_docs||[]).push([[152],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=n,k=d["".concat(s,".").concat(u)]||d[u]||m[u]||l;return a?r.createElement(k,i(i({ref:t},c),{},{components:a})):r.createElement(k,i({ref:t},c))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},681:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:1,description:"Basic installation of the platform"},i="Installation",o={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Installation",description:"Basic installation of the platform",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started/installation",permalink:"/kadras-docs/docs/getting-started/installation",draft:!1,editUrl:"https://github.com/kadras-io/kadras-docs/tree/main/docs/docs/getting-started/installation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Basic installation of the platform"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/kadras-docs/docs/category/getting-started"},next:{title:"Create a Workload",permalink:"/kadras-docs/docs/getting-started/workload"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Deploy Carvel kapp-controller",id:"deploy-carvel-kapp-controller",level:2},{value:"Add the Kadras Repository",id:"add-the-kadras-repository",level:2},{value:"Create a Secret for the OCI Registry",id:"create-a-secret-for-the-oci-registry",level:2},{value:"Configure the Platform",id:"configure-the-platform",level:2},{value:"Install the Platform",id:"install-the-platform",level:2},{value:"Verify the Installation",id:"verify-the-installation",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"installation"},"Installation"),(0,n.kt)("p",null,"Let's discover how to install Kadras Engineering Platform on a local Kubernetes cluster with ",(0,n.kt)("a",{parentName:"p",href:"https://kind.sigs.k8s.io"},"kind"),"."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("p",null,"Ensure you have the following tools installed in your local environment:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Kubernetes ",(0,n.kt)("a",{parentName:"li",href:"https://kubectl.docs.kubernetes.io/installation/kubectl"},(0,n.kt)("inlineCode",{parentName:"a"},"kubectl"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://kind.sigs.k8s.io"},"kind")),(0,n.kt)("li",{parentName:"ul"},"Carvel ",(0,n.kt)("a",{parentName:"li",href:"https://carvel.dev/kapp-controller/docs/latest/install"},(0,n.kt)("inlineCode",{parentName:"a"},"kctrl"))),(0,n.kt)("li",{parentName:"ul"},"Carvel ",(0,n.kt)("a",{parentName:"li",href:"https://carvel.dev/kapp-controller/docs/latest/install/#installing-kapp-controller-cli-kctrl"},(0,n.kt)("inlineCode",{parentName:"a"},"kapp"))," CLI.")),(0,n.kt)("p",null,"Then, create a local Kubernetes cluster with kind."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: "ingress-ready=true"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\nEOF\n')),(0,n.kt)("h2",{id:"deploy-carvel-kapp-controller"},"Deploy Carvel kapp-controller"),(0,n.kt)("p",null,"The platform relies on the Kubernetes-native package management capabilities offered by Carvel ",(0,n.kt)("a",{parentName:"p",href:"https://carvel.dev/kapp-controller"},"kapp-controller"),". You can install it with Carvel ",(0,n.kt)("a",{parentName:"p",href:"https://carvel.dev/kapp/docs/latest/install"},(0,n.kt)("inlineCode",{parentName:"a"},"kapp"))," (recommended choice) or ",(0,n.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kapp deploy -a kapp-controller -y \\\n  -f https://github.com/carvel-dev/kapp-controller/releases/latest/download/release.yml\n")),(0,n.kt)("h2",{id:"add-the-kadras-repository"},"Add the Kadras Repository"),(0,n.kt)("p",null,"Add the Kadras repository to make the platform packages available to the cluster."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create namespace kadras-packages\nkctrl package repository add -r kadras-packages \\\n  --url ghcr.io/kadras-io/kadras-packages:0.11.1 \\\n  -n kadras-packages\n")),(0,n.kt)("h2",{id:"create-a-secret-for-the-oci-registry"},"Create a Secret for the OCI Registry"),(0,n.kt)("p",null,"The platform will need to interact with a container registry. Create a Secret with the credentials to access your container registry with read/write permissions. It will be used by the platform to publish and consume OCI artifacts."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"export SUPPLY_CHAIN_REGISTRY_HOSTNAME=<hostname>\nexport SUPPLY_CHAIN_REGISTRY_USERNAME=<username>\nexport SUPPLY_CHAIN_REGISTRY_TOKEN=<token>\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"<hostname>")," is the server hosting the OCI registry. For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"ghcr.io"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"gcr.io"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"quay.io"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"index.docker.io"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"<username>")," is the username to access the OCI registry. Use ",(0,n.kt)("inlineCode",{parentName:"p"},"_json_key")," if the hostname is ",(0,n.kt)("inlineCode",{parentName:"p"},"gcr.io"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"<token>")," is a token with read/write permissions to access the OCI registry. Use the contents of the service account key json if the hostname is ",(0,n.kt)("inlineCode",{parentName:"p"},"gcr.io"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'kubectl create secret docker-registry supply-chain-registry-credentials \\\n  --docker-server="${SUPPLY_CHAIN_REGISTRY_HOSTNAME}" \\\n  --docker-username="${SUPPLY_CHAIN_REGISTRY_USERNAME}" \\\n  --docker-password="${SUPPLY_CHAIN_REGISTRY_TOKEN}" \\\n  --namespace=kadras-packages\n')))),(0,n.kt)("h2",{id:"configure-the-platform"},"Configure the Platform"),(0,n.kt)("p",null,"The installation of the Kadras Engineering Platform can be configured via YAML. Create a ",(0,n.kt)("inlineCode",{parentName:"p"},"values.yml")," file with any configuration you need for the platform. The following is a minimal configuration example."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="values.yml"',title:'"values.yml"'},"platform:\n  ingress:\n    domain: <domain>\n\n  oci_registry:\n    server: <oci-server>\n    repository: <oci-repository>\n\nworkspace_provisioner:\n  namespaces:\n    - name: default\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<domain>")," is the base domain name the platform will use to configure the Ingress controller. It must be a valid DNS name. For example, ",(0,n.kt)("inlineCode",{parentName:"li"},"lab.thomasvitale.com"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<oci-server>")," is the server of the OCI registry where the platform will publish and consume OCI images. It must be the same used in the previous step when creating a Secret with the OCI registry credentials. For example, ",(0,n.kt)("inlineCode",{parentName:"li"},"ghcr.io"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"gcr.io"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"quay.io"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"index.docker.io"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<oci-repository>")," is the repository in the OCI registry where the platform will publish and consume OCI images. It must be the same used in the previous step when creating a Secret with the OCI registry credentials. For example, it might be your username or organization name depending on which OCI server you're using.")),(0,n.kt)("h2",{id:"install-the-platform"},"Install the Platform"),(0,n.kt)("p",null,"Reference the ",(0,n.kt)("inlineCode",{parentName:"p"},"values.yml")," file you created in the previous step and install the Kadras Engineering Platform."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kctrl package install -i engineering-platform \\\n  -p engineering-platform.packages.kadras.io \\\n  -v 0.9.2 \\\n  -n kadras-packages \\\n  --values-file values.yml\n")),(0,n.kt)("h2",{id:"verify-the-installation"},"Verify the Installation"),(0,n.kt)("p",null,"Verify that all the platform components have been installed and properly reconciled."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kctrl package installed list -n kadras-packages \n")))}d.isMDXComponent=!0}}]);